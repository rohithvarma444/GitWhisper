generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String          @id @unique
  firstName     String?
  lastName      String?
  email         String          @unique
  imageUrl      String?
  credits       Int             @default(150)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Question      Question[]
  UserToProject UserToProject[]
}

model Project {
  id                  String                @id @unique @default(cuid())
  name                String
  githubUrl           String
  deletedAt           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Commits             Commit[]
  Questions           Question[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  UserToProject       UserToProject[]
  Meetings            Meeting[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Commit {
  id                    String   @id @default(cuid())
  commitHash            String
  commitMessage         String
  commitAuthor          String
  commitAuthorAvatarUrl String
  commitDate            DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  projectId             String
  summary               String?
  project               Project  @relation(fields: [projectId], references: [id])
}

model Question {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  question       String
  fileReferences Json?
  projectId      String
  userId         String
  answer         String
  project        Project  @relation(fields: [projectId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model Meeting{
  id             String @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime  @updatedAt

  meetingUrl     String
  projectId      String
  project        Project @relation(fields: [projectId], references: [id])
  issues         Issue[]
  name           String
  
  status         MeetingStatus
}

model Issue{
  id           String @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  gist         String
  summary      String
  start        String
  end          String
  headline     String

  meetingId    String
  meeting      Meeting @relation(fields: [meetingId], references: [id])
}


enum MeetingStatus{
  PROCESSING
  SUCCESS
}

model SourceCodeEmbedding {
  id               String                 @id @default(cuid())
  summaryEmbedding Unsupported("vector")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project                @relation(fields: [projectId], references: [id])
}
